@using Microsoft.AspNetCore.Components
@using System.Linq
@using System.Collections.Generic
@using Radzen.Blazor

@inherits LayoutComponentBase
@inject NavigationManager UriHelper
@inject IJSRuntime JSRuntime
@inject HttpClient Http


@if (Theme != "default.css")
{
    <link href="_content/Radzen.Blazor/css/@(Theme)" rel="stylesheet" />
}

<RadzenHeader>
    <ChildContent>
        <div class="row justify-content-start align-items-center">
            <div class="col-6 d-flex align-items-center">
                <RadzenSidebarToggle Click="SidebarToggleClick" />
                <RadzenImage Path="./FabricSupport.ico" Style="height: 5%; width: 5%; border-radius: 10%;" />
                &nbsp;
                <RadzenLabel Text="Collect SF Data" Style="font-size: 200%;" />
            </div>
        </div>
    </ChildContent>
</RadzenHeader>
<div style="width:100%">
    <RadzenBody @ref="@body0" @bind-Expanded="@bodyExpanded">
        <ChildContent>
            <RadzenContentContainer Name="main">
                @Body
            </RadzenContentContainer>
        </ChildContent>
    </RadzenBody>
</div>
<RadzenSidebar @ref="@sidebar0" @bind-Expanded="@sidebarExpanded">
    <ChildContent>
        @*<div style="padding: 1rem">
            <input placeholder="Find component ..." class="rz-textbox" type="search" @oninput="@FilterPanelMenu"
                style="width: 100%" />
        </div>*@
        <RadzenPanelMenu>
            @foreach (var category in categories)
                    {
            <RadzenPanelMenuItem @bind-Expanded=@category.Expanded Text=@category.Name Path=@category.Path
                Icon=@category.Icon>
                @if (category.Children != null)
                {
                    @foreach (var childCategory in category.Children)
                    {
                        <RadzenPanelMenuItem Text=@childCategory.Name Path=@childCategory.Path Icon=@childCategory.Icon />
                    }
                }
            </RadzenPanelMenuItem>
            }
        </RadzenPanelMenu>
    </ChildContent>
</RadzenSidebar>
@code {
    RadzenSidebar sidebar0;
    RadzenBody body0;
    bool sidebarExpanded = true;
    bool bodyExpanded = false;

    public class Categories : List<Category>
    {

    }
    public class Category
    {
        public string Name { get; set; }
        public string Icon { get; set; }
        public string Path { get; set; }
        public string Title { get; set; }
        public string Description { get; set; }
        public bool Expanded { get; set; }
        public IEnumerable<Category> Children { get; set; }
        public IEnumerable<string> Tags { get; set; }
    }

    Categories categoriesList = new Categories();
    IEnumerable<Category> categories;

    string Theme
    {
        get
        {
            return $"dark.css";
        }
    }

    protected override void OnInitialized()
    {
        categoriesList.Add(new Category()
        {
            Name = "Home",
            Title = "Home",
            Path = "/",
            Icon = "home"
        });
        categoriesList.Add(new Category()
        {
            Name = "Configure",
            Title = "Configuration",
            Path = "/add/configuration",
            Icon = "settings"
        });
        categoriesList.Add(new Category()
        {
            Name = "Configurations",
            Title = "Grid",
            Path = "/grid-config",
            Icon = "card_travel"
        });

        categories = categoriesList;
    }

    //protected override async Task OnAfterRenderAsync(bool firstRender)
    //{
    //    if (!firstRender)
    //    {
    //        var category = categories.First();

    //        //await JSRuntime.InvokeVoidAsync("setTitle", category.Title);
    //    }
    //}

    void FilterPanelMenu(ChangeEventArgs args)
    {
        var term = args.Value.ToString();

        categories = categories.Where(x => x.Title.Contains(term));
    }

    protected void SidebarToggleClick(dynamic args)
    {
        sidebarExpanded = !sidebarExpanded;
        bodyExpanded = !bodyExpanded;
    }
}
